# TODO: Nested Stack https://maya2250.hatenablog.com/entry/2018/06/23/231826
Parameters:
  PipelineName:
    Default: "nradio-recorder"
    Description: "Name of Codepipeline"
    Type: String
  ImageRepositoryName:
    Default: "nradio-recorder"
    Description: "Name of ECR"
    Type: String
  RepoOwner:
    Default: "kter"
    Description: "Name of Codepipeline"
    Type: String
  GitHubRepo:
    Default: "nradio-recorder"
    Description: "Name of Codepipeline"
    Type: String
  GitHubTokenCodePipeline:
    Type: AWS::SSM::Parameter::Value<String>
    Default: "github_token_codepipeline"
  EmailAddress:
    Description: Email Address
    Type: String
    Default: "me@kter.jp"
  DesiredCount:
    Description: ECS desired count
    Type: Number
    Default: 1
  SourceSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${AWS::StackName}
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SourceSecurityGroup
          Subnets: !Ref Subnets
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${AWS::StackName}-simple-app
      Memory: 512
      Cpu: 256
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: simple-app
          Image: amazon/amazon-ecs-sample
          EntryPoint:
            - /usr/sbin/apache2
            - -D
            - FOREGROUND
          Essential: true
          Memory: 256
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref AWS::StackName
        - Name: busybox
          Image: busybox
          EntryPoint:
            - sh
            - -c
          Essential: true
          Memory: 256
          VolumesFrom:
            - SourceContainer: simple-app
          Command:
            - /bin/sh -c "while true; do /bin/date > /var/www/my-vol/date; sleep 1; done"
  ImageRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref ImageRepositoryName
  ArtifactStoreS3:
    Type: 'AWS::S3::Bucket'
  CodePipelineRole: 
    Type: "AWS::IAM::Role"
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - 
            Effect: "Allow"
            Principal: 
              Service: 
                - "codepipeline.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"
      Policies: 
        - 
          PolicyName: "forcodepipeline"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - 
                Effect: "Allow"
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref 'ArtifactStoreS3']]
                  - !Join ['', ['arn:aws:s3:::', !Ref 'ArtifactStoreS3', '/*']]
                Action:
                  - "s3:*"
              - 
                Effect: "Allow"
                Resource: "*"
                Action:
                  - "codedeploy:CreateDeployment"
                  - "codedeploy:GetApplicationRevision"
                  - "codedeploy:GetDeployment"
                  - "codedeploy:GetDeploymentConfig"
                  - "codedeploy:RegisterApplicationRevision"
              - Sid: CodeBuildAccess
                Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt BuildProject.Arn
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Effect: "Allow"
                Resource: "*"
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:GetBucketVersioning"
              - 
                Effect: "Allow"
                Resource: !Join ['', ['arn:aws:s3:::', !Ref 'ArtifactStoreS3']]
                Action:
                  - "s3:PutObject"
              - 
                Effect: "Allow"
                Resource:
                  - !Join ['', ['arn:aws:s3:::', !Ref 'ArtifactStoreS3']]
                  - !Join ['', ['arn:aws:s3:::', !Ref 'ArtifactStoreS3', '/*']]
                Action:
                  - "s3:*"
              - 
                Effect: "Allow"
                Resource: "*"
                Action:
                  - "codedeploy:CreateDeployment"
                  - "codedeploy:GetApplicationRevision"
                  - "codedeploy:GetDeployment"
                  - "codedeploy:GetDeploymentConfig"
                  - "codedeploy:RegisterApplicationRevision"
              - Sid: CloudWatchLogsAccess
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Sid: ECRAccess
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:SetRepositoryPolicy
                  - ecr:GetRepositoryPolicy
                Resource:
                  - '*'
              - Sid: ECRAccess2
                Effect: Allow
                Action:
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                Resource:
                  - 'arn:aws:ecr:*:*:repository/nradio-recorder'
                  #- ''
                  #- - 'arn:aws:ecr:*:*:repository/'
                  #  - !Ref ImageRepositoryName
              - Sid: ECSAccess
                Effect: Allow
                Action:
                  - ecs:*
                Resource:
                  - "*"
  BuildProject:
    Description: Creating AWS CodeBuild project
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Cache:
        Type: S3
        Location: !Join [ "/", [ !Ref ArtifactStoreS3, buildcache ]]
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: Branch
            Value: master
        Image: "aws/codebuild/docker:17.09.0"
        PrivilegedMode: true
        Type: LINUX_CONTAINER
      Name: ImageBuild
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 5
  AppPipeline: 
    Type: "AWS::CodePipeline::Pipeline"
    Properties: 
      Name: !Ref PipelineName
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages: 
        - 
          Name: Source
          Actions: 
            - 
              Name: SourceAction
              ActionTypeId: 
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts: 
                - 
                  Name: SourceOutput
              Configuration: 
                Owner: !Ref RepoOwner
                Repo: !Ref GitHubRepo
                Branch: master
                OAuthToken: !Ref GitHubTokenCodePipeline
              RunOrder: 1
        -
          Name: build
          Actions: 
            - 
              Name: BetaAction
              InputArtifacts: 
                - 
                  Name: SourceOutput
              OutputArtifacts: 
                - 
                  Name: BuildOutput
              ActionTypeId: 
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration: 
                ProjectName: !Ref BuildProject
              RunOrder: 1
        -
          Name: deploy
          Actions: 
            - 
              Name: DeployToECS
              InputArtifacts: 
                - 
                  Name: BuildOutput
              ActionTypeId: 
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Ref ECSCluster
                ServiceName: !Ref ECSService
                FileName: imagedefinitions.json
              RunOrder: 1
      ArtifactStore: 
        Type: S3
        Location: !Ref ArtifactStoreS3
